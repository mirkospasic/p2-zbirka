###############################################################################

Preostali poslovi

1. Srediti numeraciju kod listinga (Milena)

2. Srediti repozitorijum:
a) treba da sadrzi poddirektorijume za biblioteke (svako svoju)
b) imena resenja treba da se gadjaju sa rednim brojevima zadataka u zbirci (Svi)
c) napraviti makefile koji ce sve odjednom da prevede, nazubi i upakuje (Mirko)
d) dodati readme fajl u koreni foleder repozitorijuma (Mirko)
e) dodati licencnu poruku na pocetak svake datoteke (smisliti poruku --- svi)

3. Srediti stderr i stdout izlaz u tekstu zadataka --- dodata komanda \naslovIzlazZaGresku, svako u svojim test primerima to treba da proveri i zameni

4. Pregledati konvencije imenovanja koje se koriste kroz zbirku i to usaglasiti (Svi) tj da li je kamilja notacija ili madjarska notacija (mislim da nije kamilja, tj da je ona, ako je ima, u manjini)

5. Proveriti da li je pred svaku funkciju dat komentar na temu sta ta funkcija izracunava (Svi)

6. Izdvojiti print_bits u biblioteku (Nina)

7. Voditi racuna da se ne mesa rad sa Windows-a i Linux-a jer to posle pravi probleme indent-u
   zbog znaka za novi red

8. Dodati napomenu da je F uopstenje za fibonacijeve brojeve (gde su nestali fibonacijevi brojevi?) (Nina)
9. Resenje 1.32 nije tacno, tj ne odgovara tekstu zadatka, nesto sam ispravljala, mozda sam zabrljala, nisam testirala (Nina)
10. Detaljno treba precesljati prvo poglavlje i to po svim pitanjima (Nina, Jelena)
11. Dopuniti predgovor (svi)
 --- (GPL) Trebalo bi u Predgovoru obrazloziti bar jednom recenicom zasto su zadaci prve glave nazvani uvodnim i sta obuhvataju
 --- (GPL) Trebalo bi (verovatno opet u Predgovoru) komentarisati zadatke sa * i **.
12. Napraviti dizajn korica (Andjelka)
13. Napraviti finalni prelom (Milena)

14. Dodati email adresu u predgovor --- smisliti koja adresa bi to mogla da bude

Recenzija

3. Bilo bi korisno pre koda resenja kratko objasniti postupak resavanja ili neke njegove specificnosti,
bar kod nekih zadataka (npr. algoritmi sortiranja i pretrage);
na vezbama se verovatno nesto o tome kaze; negde toga ima u komentaru zadatka ali ne svuda gde bi trebalo i ne dovoljno

4. Bilo bi korisno ako bi svako od autora jos jednom pazljivo procitao ceo tekst.
Time bi se postigli razni pozitivni efekti, na primer
- verovatno bi se otklonile izvesne (terminoloske) neujednacenosti koje su (verovatno)
rezultat rada veceg broja autora, na primer
U datoteci matrica.c "Alocira se prostor za niz vrsti matrice " - vrsta
(uporediti sa resenjem 2.18 "Pokazivac na dinamiciki alociran niz pokazivaca na vrste matrice" - razlicita terminologija)
- uocili biste moguce nekonzistentnosti izmedju postavke zadatka i primera ("Interakcije sa programom").
- otklonili biste izvesne slovne greske, na primer "Napisati program koja ...", "u heksadekasnom formatu",
"realan i imaginara deo", "dodavanjem opcije opcije -l" i sl.
- ujednacili biste formulaciju (ima u postavkama zadataka mesavine prezenta / imperativa,
na primer "Program ucitava... Potom matricu ispisati...")
- uocili biste neke sintaksne greske, na primer "Zapocinje se sa ispisom"
- malo stilistike, npr. umesto "ispratiti" - "propratiti" i sl. 

5. Neke formulacije bi mogle da budu preciznije. Na primer,
u datoteci complex.h opis dejstva pretprocesorske direktive ifndef nije sasvim jasan

6. Neki detalji, na primer:
U tacki 2.2 Visedimnezioni nizovi - svi zadaci su reseni indeksnom sintaksom (samo u 2.8 ilustrovana je pokazivacka)
- mozda bi tu moglo da se malo izbalansIra
U zadatku 2.27 - Pokazivaci na funkcije - da li je "mreza" pravi izraz u jednoj dimenziji?
U resenju 2.18 "A = maloc..." - "A = (double **)malloc..."
U zadatku 3.6 vise smisla bi imala proizvoljna funkcija koja na datom intervalu ima jednu nulu
U zadatku 3.30 bio bi koristan primer za element koji se ponavlja tako da ga
bsearch nadje na jednim a lfind na drugom mestu
U resenju 3.1 korisno bi bilo navesti oznake u komentarima
-"Linearna pretraga", "Binarna pretraga," ...i,  kao sto je navedena recenica za
linearnu pretragu "Pretraga se vrsi...", dodati takvu recenicu u sledeca dva komentara koji
se odnose na binarnu i interpolacionu pretragu.
Takodje, u opisu linearne pretrage, treba reci da funkcija vraca indeks prve pozicije (ili krajnje leve)...
U istom resenju pominje se "seed" bez posebnog objasnjenja - ne znam koliko je poznato

U resenju 3.6 trebalo bi neko obrazlozenje u vezi sa time da funkcija...
na intervalu ... ima jednu nulu i znak joj je na krajevima intervala razlicit

U resenju 3.11 mesaju se "d" i "r" (za desno i right).

U zadatku 4.1 se pod (1) i (2) trazi da se "U progarmu..." nesto uradi,
a pod (3) da se "U glavnom programu..." nesto ursi

Zadatak 4.12 bi trebalo prvo da uvede "krug" pa onda nacin kretanja po krugu
 
###############################################################################








Osnovna datoteka je
zbirka.tex
Ona samo ukljucuje potrebne datoteke. Nju latexujete da biste dobili .pdf

zbirka.bib se odnosi na literaturu, mozda ce nam trebati

Dalje, imamo tri poddirektorijuma

1. Direktorijum podesavanja sadrzi tri .tex:
stil_strane.tex --- sluzi za podesavanje izlgeda dokumenta
definisane_komande.tex --- ovde su definisana razna okruzenja koja cemo koristiti
paketi.tex --- ukljucivanje potrebnih paketa u dokument

2. Direktorijum resenja sadrzi poddirektorijume za .c fajlove za svako 
poglavlje (tj Mirko nije kreirao sve poddirektorijume, to cemo vec dodati).
Predlazem sledecu konvenciju imenovanja resenja: trocifreni brojevi pri cemu 
prva cifra oznacava oblast kojoj zadatak pripada (npr 1 za rekurziju, 2 za 
bitove, 3 za pokazivace...). Iako znam da ce se redosled zadataka menjati i da 
je to neminovno, ovo mi ipak deluje kao najjednostavnija i najurednija ideja. 
Ako neko ima bolju ideju, neka javi.

3. Direktorijum poglavlja sadrzi vise .tex datoteka, tj za svaku oblast po 
jednu, plus posebnu .tex datoteku za naslovnu stranu i za predgovor
Svako ce, u skladu sa svojom oblascu, menjati ove fajlove.

Najpre bih sve zamolila da koriste nasa slova, tj š, č, ć, đ, ž a ne one 
kuke tj \v{s} i slicno koje cine tekst u tex formatu tesko citljivim. Nadam se 
da to nije nikome problem, sa sa find-replace se moze sve lako srediti ukoliko 
u tekucim verzijama imate ovu zastarelu varijantu.

Svaki zadatak pisete na sledeci nacin --- primer iz drugog poglavlja:

\begin{Exercise}[label=201]
Napisati funkciju \kckod{int Broj01(unsigned int n)} koja za dati broj 
\argf{n} vraća \argf{1} ako u njegovom binarnom zapisu ima više jednica nego 
nula, a inače vraća \argf{0}.  Napisati program koji tu funkciju testira za 
broj koji se zadaje sa standardnog ulaza.

\begin{minitest}
\begin{test}{Test 1}
Ulaz:   10
Izlaz:  0 
\end{test}
\end{minitest}
\begin{minitest}
\begin{test}{Test 2}
Ulaz:   1024
Izlaz:  0 
\end{test}
\end{minitest}
\begin{minitest}
\begin{test}{Test 3}
Ulaz:   2147377146
Izlaz:  1 
\end{test}
\end{minitest}

\begin{minitest}
\begin{test}{Test 4}
Ulaz:   1111111115
Izlaz:  0 
\end{test}
\end{minitest}

\linkresenje{201}

\end{Exercise}
\begin{Answer}[ref=201]
\includecode{resenja/02_Bitovi/201.c}
\end{Answer}


Okruzenje Exercise treba da obuhvati tekst zadatka, tj izmedju \begin{Exercise} 
i \end{Exercise}.
Labela treba da bude jedinstvena, predlazem da i to budu redom brojevi, gde 
prvi broj odgovara broju poglavlja. Labela i ref omogucavaju da se sa resenja 
klikne i vrati na zadatak.

Postoje i druge stvari koje mogu sa se navedu u okviru uglastih zagrada (npr 
da se naznaci da je zadatak tezi, pa da se na osnovu toga generise zvezdica i 
takve neke stvari, ali otom potom). Koga intresuje vise ovo okruzenje, moze 
detalja da pogleda na
http://ctan.mirror.ac.za/macros/latex/contrib/exercise/exercise.pdf

\kckod je komanda koju sam ja definisala i koja je skracenica od KratakCKod. 
Trenutno je to definisano kao najobicniji texttt, ali ukoliko budemo zeleli to 
da menjamo ili podesavamo, ovako je najzgodnije. 

n, 1 i 0 su u okviru komande \argf (skraceno od argument funkcije).

Test primeri su u okruzenju test. Tu se jos navodi u okviru {} ime testa, tj 
rec Test i redni broj. Okruzenje test je u okviru okruzenja minitest. Pokusala 
sam da to objedinim ali nazalost tako nesto nije moguce, pa mora duplo da se 
kuca. Minitest je zapravo zamena za minipage sa predefinisanom sirinom. 
Definisala sam i miditest i maxitest, u zavisnosti od sirine koja je za test 
potrebna. Ideja je da testove mozemo da slazemo jedan uz drugi, kao i da svi 
koristimo fiksne duzine, zato sam navela ove tri velicine, mada je to, naravno, 
fleksibilno,

Okruzenje Answer se koristi samo da se oznaci rešenje zadatka, i tu imamo 
uključivanje C koda iz odgovarajuće datoteke rešenja. Dakle taj deo bi trebao 
da je uvek isti, sem sto se ref i ime datoteke koja se ubacuje razlikuju. 
Koristi se \includecode komanda za ubacivanje.

\linkresenje - komanda kojom se dodaje link sa zadatka na njegovo resenje

1) Zadatke koji se testiraju konstantama bih preformulisala u 
zadatke koji se testiraju vrednostima koje se unose sa standardnog ulaza.
2) Zadatke koji se sastoje iz vise delova bih formulisala nalik na prva 
dva zadatka kod visedimenzionih nizova ili bih razdvojila u vise manjih 
zadataka, ukoliko je to negde prirodnije. 
Naime, Filip me je naucio da su njega lektori naucili da nabrajanje ne sme 
da narusava strukturu recenice i da je naredno nabrajanje oblika:

Napisati:
a) funkciju koja .... i na kraju tacka.
b) funkciju koja .... i na kraju tacka.
c) funkciju koja .... i na kraju tacka.

nije ispravno jer ne moze jedna recenica da se nastavlja na tri mesta. 
U skladu sa time, drzala bih se formulacija koje su u skladu sa 
pravilima srpskog jezika (primere takvih formulacija videcete kod pokazivaca
i visedimenzionih nizova).

Nekim tezim zadacima mozemo dodati zvezdice na ovaj nacin:
\begin{Exercise}[title={Sortiranje}, difficulty=2, label=401] Ovde je
dodato i ime zadatku, ako negde bude i tako nesto potrebno.  Ako je
zadatak tezi, onda difficulty=1, ako je bas tezak, onda difficulty=2.
Npr \begin{Exercise}[label=401, difficulty=1]


Uputstva za unos resenja

> 1. Kada unosim resenja zadataka sa vezbi, da li da unosim i sve (detaljne)
> komentare koji tamo stoje ili ne? Ako da, onda bi te komentare trebalo
> detaljno preformulisati ali bi to zahtevalo zaista puno vremena.

Uzmes zadatak sa vezbi, sredis da je kod u skladu sa zadatkom, sredis mu komentare, testiras resenje da je dobro. Komentari moraju da postoje, u kojoj meri, to je vec stvar ukusa, izbaci sta mislis da treba, ubaci sta mislis da nedostaje.

Formatiranje resenja se radi alatom indent:
indent -fc1 -fca -kr --no-tabs --line-length70 -i2 *.c *.h
-fc1 -fca - Formatiraj i komentare
-kr - Formatiranje kao u knjizi Kernighan&Ritchie
--no-tabs - Umesto TAB-ova koristimo space-ove (zbog PDF-a)
--line-length65 - maksimalna duzina linije je 65 (zbog PDF-a)
-i2 - Podrazumevano uvlacenje je 2 blanko karaktera

> 3. Da li da ogranicavamo duzinu reda na neki odredjeni broj karaktera ili
> ne? Ovo pitanje se odnosi i na komentare i na kod.

Odgovor na ovo je isti kao prethodni - da moracemo da se ogranicimo, ali mislim da ce to moci automatski da se uradi. A mozda i nece (tj hoce sigurno, ali ako se radi automatski pitanje je koliko lepo ce da izgleda), pa nije lose u startu voditi racuna da se ne prelazi 80 karaktera u redu. 

Terminologija:
Umesto termina "drvo" koristiti "stablo".

Kod duzih zadataka je moguce podeliti kod u vise datoteka, i u PDF
ukljuciti samo onu najbitniju, bez nekih standardno potrebnih
stvari. (ovo se pre svega odnosi na stabla i liste). Obavezno je da se
zadatak kompilira.

Testovi:
Napravila sam dva okruzenja, jedno je test, a drugo je upotreba. Naslove 
vise nije potrebno pisati, vec samo brojeve.

Npr \begin{test}{1} a ne \begin{test}{Test 1}

Na ovaj nacin cemo spreciti kasnije masovno find-replace ukoliko 
promenimo neko ime.

Midi, mini, maxi - to je ostalo isto, jer samo doredjuje sirinu.

Evo jednog novog primera:

\begin{miditest}
\begin{upotreba}{1}
#\naslovInt#
#\izlaz{Unesite trazeni broj:} \ulaz{11}#
#\izlaz{Unesite sortiran niz elemenata:}#
#\ulaz{2 5 6 8 10 11 23}#
#\izlaz{Linearna pretraga}#
#\izlaz{Pozicija elementa je 5.}#
#\izlaz{Binarna pretraga}#
#\izlaz{Pozicija elementa je 5.}#
#\izlaz{Interpolaciona pretraga}#
#\izlaz{Pozicija elementa je 5.}#
\end{upotreba}
\end{miditest}

Dakle, potrebno je tagovti sa ulaz i izlaz, o cemu smo vec pricali, ali 
je ruzan novitet to sto je potrebno i dodatno tagovati sa tarabom.
Borila sam se kao lav do to ne bude neophodno, ali nisam uspela da 
nadjem nacin...

Dalje, nema potrebe unositi blanko ispred, jer ce to biti automatski 
uneseno (tj za ulaz i izlaz je 2mm od linije je udaljen tekst).

Komanda NaslovInt je za ubacivanje naslova tj niske "Interakcija 
programa"  ili sta vec budemo odlucili da to bude.

Ovo je drugi primer, koji sadrzi datoteku:
\begin{maxitest}
\begin{upotreba}{1}
#\naslovDat{Datoteka}#
#\datoteka{20140003 Marina Petrovic}#
#\datoteka{20140012 Stefan Mitrovic}#
#\datoteka{20140032 Dejan Popovic}#
#\datoteka{20140049 Mirko Brankovic}#
#\datoteka{20140076 Sonja Stevanovic}#
#\datoteka{20140104 Ivan Popovic}#
#\datoteka{20140187 Vlada Stankovic}#
#\datoteka{20140234 Darko Brankovic}#
#\naslovInt#
#\izlaz{Unesite indeks studenta cije informacije zelite:}\ulaz{20140076}#
#\izlaz{Indeks: 20140076, Ime i prezime: Sonja Stevanovic}#
#\izlaz{Unesite prezime studenta cije informacije zelite:}\ulaz{Popovic}#
#\izlaz{Indeks: 20140032, Ime i prezime: Dejan Popovic}#
\end{upotreba}
\end{maxitest}

NaslovDat ima argument jer se tu, koliko sam videla, javljaju razliciti 
naslovi (samo datoteka ili ulazna datoteka ili sta vec treba), a komanda 
\datoteka se odnosi na sadrzaj datoteke.

Ukoliko vam treba poziv, pise se ovako (automatski se dodaje ono Poziv 
ispred):
#\poziv{./a.out kolokvijum.txt}#
#\naslovDat{Ulazna datoteka (kolokvijum.txt):}#        #\naslovInt#
...

Sto se testova tice, sve ovo isto moze da se koristi i kod testova. 
Dakle, tu bi koristili
#\naslovUlaz#
i
#\naslovIzlaz#
umesto onog Ulaz: i Izlaz:

Na primer:
\begin{test}{1}
#\naslovIzlaz#
#\izlaz{1.57031}#
\end{test}

ili ovako
\begin{test}{1}
#\naslovUlaz#
#\ulaz{0x7F}#
#\naslovIzlaz#
#\izlaz{00000000000000000000000001111111}#
\end{test}

Tako bi dobili da je poravnanje kod svih isto.

Za upotrebu:
1. Uvek ide prvo poziv --- poziv navodimo uvek kada se poziva sa 
argumentima komandne linije, ne i kada je obican poziv
2. Ukoliko imamo datoteku, navodi se naslov datoteke pa njen sadrzaj
3. Zatim ide \naslovInt (tj deo koji se odnosi na interakciju)
4. Dalje idu ulaz i izlaz kako vec treba

Za test
1 i 2 isto
3. Naslov ulaz
4. Ulaz
5. Naslov izlaz
6. izlaz
Ukoliko ulaza nema, onda preskociti 4 i 5.

Takodje, zamolila bih da se nerazbacujete sa maxi primerima, pakujte 
uvek sve u midi sto moze da stane u midi (sadrzaj datoteke prelomite u 
dva reda, i slicno).

Jos jedna vazna napomena. Doradjujuci primere koje je Jelena danas 
sredjivala, shvatila sam da nisu dovoljno citljivi. Pokusala sam da to 
sredim kako treba i nakon nekih sat ipo vremena sam shvatila da je ipak 
najlaksi nacin za sredjivanje to da se dodaju prazni redovi u upotrebe i 
test primere. Dakle, PRE svakog naslova, stavite jedan prazan red. Primer:

\begin{miditest}
\begin{upotreba}{2}
#\poziv{./a.out ulaz.txt}#
                  <----------ovde je prazan red koji se ostavlja radi citljivosti
#\naslovDat{Ulazna datoteka (ulaz.txt)}#
#\datoteka{Ovo je sadrzaj datoteke i u njoj ima }#
#\datoteka{reci koje imaju 1 karakter}#
                  <----------ovde je prazan red koji se ostavlja radi citljivosti
#\naslovInt#
#\izlaz{Greska: Nedovoljan broj argumenata}#
#\izlaz{komandne linije.}#
#\izlaz{Program se poziva sa }#
#\izlaz{./a.out ime\_dat br\_karaktera.}#
\end{upotreba}
\end{miditest}
